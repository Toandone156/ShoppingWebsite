@page
@model ShoppingWebsite.Pages.Order.CheckoutModel
@{
    var total = Int32.Parse(ViewData["Total"]?.ToString() ?? "0");
    ViewData["Title"] = "Checkout";
}

<!-- Breadcrumb Begin -->
<div class="breadcrumb-option">
    <div class="container">
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-6">
                <div class="breadcrumb__text">
                    <h2>Thanh toán</h2>
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6">
                <div class="breadcrumb__links">
                    <a href="./index.html">Trang chủ</a>
                    <span>Thanh toán</span>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Breadcrumb End -->
<!-- Checkout Section Begin -->
<section class="checkout spad">
    <div class="container">
        <div class="checkout__form">
            <form id="place-order" method="post" onkeydown="return event.key != 'Enter';">
                <div class="row">
                    <div class="col-lg-8 col-md-6">
                        <h6 class="checkout__title">Thông tin nhận hàng</h6>
                        <div class="checkout__input">
                            <p>Name<span>*</span></p>
                            <input asp-for="@Model.Name" placeholder="Name" disabled>
                        </div>
                        <div class="checkout__input">
                            <p>Phone<span>*</span></p>
                            <input asp-for="@Model.Phone" placeholder="Phone">
                            <span asp-validation-for="@Model.Phone" class="text-danger"></span>
                        </div>
                        <div class="checkout__input">
                            <p>Address<span>*</span></p>
                            <div class="d-flex mb-4">
                                <input asp-for="@Model.Address" placeholder="Address" class="mb-0">
                                <button type="button" class="btn btn-outline-primary ml-2" id="currentloc">
                                    <i class="fa fa-map-marker" aria-hidden="true"></i>
                                </button>
                            </div>
                            <span asp-validation-for="@Model.Address" class="text-danger"></span>

                            <div id="googleMap" style="width:100%;height:400px;"></div>
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-6">
                        <div class="checkout__order">
                            <h6 class="order__title">Đơn hàng của bạn</h6>
                            <div class="checkout__order__products">Sản phẩm <span>Tổng</span></div>
                            <ul class="checkout__total__products">
                                @for(int i = 0; i < Model.cart.Count; i++)
                                {
                                    var item = Model.cart[i];
                                    <li><samp>@((i+1).ToString("00")).</samp> @item.Product.ProductName <span>@((item.UnitPrice * item.Quantity).ToString("N0"))</span></li>
                                }
                            </ul>
                            <ul class="checkout__total__all">
                                <li id="shipment">Tiền ship <span>0</span></li>
                                <li>Tổng cộng <span class="total">@total.ToString("N0")</span></li>
                            </ul>
                            <ul class="checkout__total__all d-none" style="border: none;">
                                <img src=""
                                style="object-fit: contain;" class="qr-img"/>
                            </ul>
                            <button type="submit" class="site-btn place-btn">Chuyển khoản</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</section>
<!-- Checkout Section End -->

@section Scripts {
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDp2gmZ-AeZB9Z4m8XZDTU4c78tJeDGuK0&libraries=places"></script>

    <script>
        var total = @total;
        var shipmentElement = document.getElementById("shipment");
        var totalElement = document.querySelector(".total");

        function UpdateTotal(shipamount) {
            totalElement.textContent = (total + Math.round(shipamount/1000)*5000).toLocaleString('en-GB');
        }

        function UpdateShipment(shipamount, shiptext) {
            shipmentElement.innerHTML = `Tiền ship (${shiptext}) <span>${(Math.round(shipamount / 1000) * 5000).toLocaleString('en-GB')}</span>`;
        }

        function initialize() {
            const mapElement = document.getElementById("googleMap");
            const inputElement = document.getElementById("Address");
            const currentButton = document.getElementById("currentloc");
            const mapProp = {
                center: new google.maps.LatLng(15.967854, 108.260281),
                zoom: 13,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            const map = new google.maps.Map(mapElement, mapProp);
            const options = {
                fields: ["formatted_address", "geometry", "name"],
                strictBounds: false,
            };
            const autocomplete = new google.maps.places.Autocomplete(inputElement, options);
            const service = new google.maps.places.PlacesService(map);
            const geocoder = new google.maps.Geocoder();

            const marker = new google.maps.Marker({
                map
            });
            const directionsRenderer = new google.maps.DirectionsRenderer();
            const directionsService = new google.maps.DirectionsService();

            //Setup direction
            directionsRenderer.setMap(map);
            const startPosition = new google.maps.LatLng(15.9827065, 108.2593843);

            //Autocomplete address
            autocomplete.bindTo("bounds", map);
            autocomplete.addListener("place_changed", () => {
                const place = autocomplete.getPlace();
                SetMarker(place);
            });

            //Select on map
            map.addListener("click", (e) => {
                BindMarkerAndInput(e.latLng.lat(), e.latLng.lng());
            });

            //Get current location
            currentButton.addEventListener("click", () => {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            console.log({ lat: position.coords.latitude, lng: position.coords.longitude });
                            BindMarkerAndInput(position.coords.latitude, position.coords.longitude);
                        },
                        error => { console.error(error); },
                        {
                            enableHighAccuracy: true,
                            timeout: 5000,
                            maximumAge: 0,
                        }
                    );
                }
            });

            //Get init
            if (inputElement.value != "") {
                InitAddress(inputElement.value);
            }

            //Common functions
            function CalculateAndDisplayRoute(endLat, endLng) {
                var end = new google.maps.LatLng(endLat, endLng);

                directionsService
                    .route({
                        origin: startPosition,
                        destination: end,
                        travelMode: google.maps.TravelMode.DRIVING,
                    })
                    .then((response) => {
                        directionsRenderer.setDirections(response);
                        var distance = response.routes[0].legs[0].distance.value; // Distance in meters
                        var distanceText = response.routes[0].legs[0].distance.text; // Distance in a human-readable format
                        UpdateShipment(distance, distanceText);
                        UpdateTotal(distance);
                    })
                    .catch((e) => console.error("Directions request failed due to " + e));
            }

            function InitAddress(address) {
                geocoder.geocode({ address: address }, (results, status) => {
                    if (status === google.maps.GeocoderStatus.OK) {
                        if (results[0] && results[0].geometry) {
                            CalculateAndDisplayRoute(results[0].geometry.location.lat(), results[0].geometry.location.lng());
                        } else {
                            inputElement.value = "";
                        }
                    } else {
                        console.error("Geocoder failed: " + status);
                    }
                });
            }

            function getPlaceId(latitude, longitude) {
                const latlng = new google.maps.LatLng(latitude, longitude);

                return new Promise((resolve, reject) => {
                    geocoder.geocode({ location: latlng }, (results, status) => {
                        if (status === google.maps.GeocoderStatus.OK) {
                            if (results[0] && results[0].place_id) {
                                resolve(results[0].place_id);
                            } else {
                                resolve(null); // Indicate no place_id found
                            }
                        } else {
                            reject(new Error("Geocoder failed: " + status));
                        }
                    });
                });
            }

            function BindMarkerAndInput(lat, lng) {
                getPlaceId(lat, lng)
                    .then(placeId => {
                        if (placeId) {
                            const request = {
                                placeId: placeId,
                                fields: ["name", "formatted_address", "place_id", "geometry"],
                            };

                            service.getDetails(request, (place, status) => {
                                if (
                                    status === google.maps.places.PlacesServiceStatus.OK &&
                                    place &&
                                    place.geometry &&
                                    place.geometry.location
                                ) {
                                    SetMarker(place);
                                    inputElement.value = place.formatted_address;
                                }
                            });
                        }
                    });
            }

            function SetMarker(place) {
                marker.setVisible(false);

                if (!place.geometry || !place.geometry.location) {
                    window.alert("No details available for input: '" + place.name + "'");
                    return;
                }

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }

                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                CalculateAndDisplayRoute(place.geometry.location.lat(), place.geometry.location.lng())
            }
        }

        google.maps.event.addDomListener(window, 'load', initialize);
    </script>
}